#!/bin/bash
set -e
#set -x

DIR=$(dirname $0)
export PWD=$(pwd)

find-up () {
  path=${2-$PWD}
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path"
}

if [[ -z $COMPOSE_PROJECT_APPDIR ]]; then
  export COMPOSE_PROJECT_APPDIR=$(find-up composer.json "$PWD/www")
fi

if [[ -z $COMPOSE_PROJECT_APPDIR ]]; then
  if [ -z "$(ls $PWD)" ]; then
    export COMPOSE_PROJECT_APPDIR="$PWD"
  else
    echo "Application root folder not found, and current directory is not empty, terminating..."
    exit 1
  fi
fi

if [[ ! -d "$COMPOSE_PROJECT_APPDIR" ]]; then
  mkdir -p "$COMPOSE_PROJECT_APPDIR"
fi

cd "$COMPOSE_PROJECT_APPDIR"

if [[ -f .dockenv ]]; then
  set -o allexport
  source .dockenv
  set +o allexport
fi

if [[ -f .env ]]; then
  set -o allexport
  source .env
  set +o allexport
fi

export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-$(basename "$COMPOSE_PROJECT_APPDIR")}
export COMPOSE_PROJECT_PORT_PREFIX=${COMPOSE_PROJECT_PORT_PREFIX:-"302"}
export COMPOSE_PROJECT_PORT_HTTP=${COMPOSE_PROJECT_PORT_HTTP:-"${COMPOSE_PROJECT_PORT_PREFIX}80"}
export COMPOSE_PROJECT_PORT_XHGUI=${COMPOSE_PROJECT_PORT_XHGUI:-"${COMPOSE_PROJECT_PORT_PREFIX}81"}
export COMPOSE_PROJECT_PORT_MYSQL=${COMPOSE_PROJECT_PORT_MYSQL:-"${COMPOSE_PROJECT_PORT_PREFIX}06"}
export COMPOSE_PROJECT_PORT_ELASTICSEARCH=${COMPOSE_PROJECT_PORT_ELASTICSEARCH:-"${COMPOSE_PROJECT_PORT_PREFIX}92"}
export COMPOSE_PROJECT_PORT_MAIL_WEBGUI=${COMPOSE_PROJECT_PORT_MAIL_WEBGUI:-"${COMPOSE_PROJECT_PORT_PREFIX}25"}
export COMPOSE_PROJECT_COMPOSER_AUTH=${COMPOSE_PROJECT_COMPOSER_AUTH:-${COMPOSER_AUTH:-""}}
export COMPOSE_PROJECT_CONFIG_DIR="$HOME/.$(basename $0)/${COMPOSE_PROJECT_NAME}"

if [[ ! -d "${COMPOSE_PROJECT_CONFIG_DIR}" ]];then
    mkdir -p "${COMPOSE_PROJECT_CONFIG_DIR}"
fi

rsync -r "${DIR}/" "${COMPOSE_PROJECT_CONFIG_DIR}/"


DOCKER_COMPOSE_BIN="${DOCKER_COMPOSE_BIN-$(which docker) compose}"
DOCKER_COMPOSE_VERSION=$($DOCKER_COMPOSE_BIN version | grep '[0-9]\+\.[0-9]\+\.[0-9]\+' -o | awk -F. '{ print $1 }')
if [[ -f "${COMPOSE_PROJECT_CONFIG_DIR}/docker-compose.yml" ]]; then
  DOCKER_COMPOSE_BIN="${DOCKER_COMPOSE_BIN} -f ${COMPOSE_PROJECT_CONFIG_DIR}/docker-compose.yml"
fi

if docker system info --format '{{.SecurityOptions}}' | grep "name=rootless" > /dev/null 2>&1; then
  # Use root user in the rootless mode
  export COMPOSE_PROJECT_USER_NAME="root"
else
  export COMPOSE_PROJECT_USER_NAME="developer"
fi

if [[ -f ${COMPOSE_PROJECT_APPDIR}/docker-compose-magento.local.yml ]]; then
  DOCKER_COMPOSE_BIN="${DOCKER_COMPOSE_BIN} -f ${COMPOSE_PROJECT_APPDIR}/docker-compose-magento.local.yml"
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  MACOS_VERSION=$(which sw_vers > /dev/null && sw_vers | grep ProductVersion | grep -o '[0-9]\+\.[0-9]\+' || true)
  #if [[ $(echo $MACOS_VERSION | awk -F. '{print $1}') -gt 12 ]] || [[ $(echo $MACOS_VERSION | awk -F. '{print $1}') -gt 11 ]] && [[ $(echo $MACOS_VERSION | awk -F. '{print $2}') -gt 2 ]]; then
  #  export COMPOSE_PROJECT_MODE=${COMPOSE_PROJECT_MODE:-default}
  #else
    export COMPOSE_PROJECT_MODE=${COMPOSE_PROJECT_MODE:-mutagen}
  #fi
else
  export COMPOSE_PROJECT_MODE=${COMPOSE_PROJECT_MODE:-default}
fi

if [[ $COMPOSE_PROJECT_MODE == "mutagen" ]] && [[ -f "${COMPOSE_PROJECT_CONFIG_DIR}/docker-compose-mutagen.yml" ]]; then
  DOCKER_COMPOSE_BIN="${DOCKER_COMPOSE_BIN} -f ${COMPOSE_PROJECT_CONFIG_DIR}/docker-compose-mutagen.yml"
  MUTAGEN_SESSION_NAME=$(echo ${COMPOSE_PROJECT_NAME}-appcode | awk '{print tolower($0)}' | sed 's/[^0-9a-z]/-/g')
  WAIT_SYNC="1"
  if docker volume ls | grep "^${COMPOSE_PROJECT_NAME}_appcode$" > /dev/null 2>&1; then
    if [[ $(docker volume inspect -f '{{ .Options.type }}' ${COMPOSE_PROJECT_NAME}_appcode) == "nfs" ]]; then
      docker volume rm ${COMPOSE_PROJECT_NAME}_appcode
    fi
  fi

  if [[ $1 == "down" ]]; then
    if mutagen sync list | grep -i "Name: ${MUTAGEN_SESSION_NAME}" > /dev/null 2>&1; then
      mutagen sync terminate "${MUTAGEN_SESSION_NAME}"
    fi
    WAIT_SYNC=""
  else
    if [[ "0" -eq $(${DOCKER_COMPOSE_BIN} ps -q mutagen  2> /dev/null | wc -l > /dev/null) ]]; then
      ${DOCKER_COMPOSE_BIN} up -d mutagen
    fi
    DOCKER_CONTAINER_NAME_MUTAGEN=$(docker inspect -f '{{.Name}}' $(${DOCKER_COMPOSE_BIN} ps -q mutagen) | cut -c2-)
    if ! mutagen sync list | grep -i "Name: ${MUTAGEN_SESSION_NAME}" > /dev/null 2>&1; then
      if docker system info --format '{{.SecurityOptions}}' | grep "name=rootless" > /dev/null; then
        MUTAGEN_USER="root"
      else
        MUTAGEN_USER="php"
      fi
      mutagen sync create --sync-mode=two-way-resolved \
      --scan-mode=accelerated \
      --watch-mode-alpha=portable \
      --watch-mode-beta=force-poll \
      --watch-polling-interval-beta=3 \
      --ignore=".idea" \
      --ignore=".history" \
      --ignore=".mysql.initdb.d" \
      --ignore=".psql.initdb.d" \
      --ignore=".git" \
      --ignore-vcs \
      --symlink-mode=ignore \
      --name=${MUTAGEN_SESSION_NAME} \
      "$COMPOSE_PROJECT_APPDIR" docker://${MUTAGEN_USER}@${DOCKER_CONTAINER_NAME_MUTAGEN}/var/www
    else
      WAIT_SYNC=""
    fi

    if [[ $WAIT_SYNC == "1" ]]; then
      until mutagen sync list "${MUTAGEN_SESSION_NAME}" | grep 'Status:' | grep 'Watching for changes' > /dev/null 2>&1; do
        if which tput > /dev/null 2>&1; then
          tput cuu 1 && tput el
        fi
        mutagen sync list "${MUTAGEN_SESSION_NAME}" | grep 'Status:' | echo $(awk -F: '{ print $2 }')
        sleep 3
      done
    fi
  fi
fi

if [[ $1 == "up" ]]; then
  printf "\033[0;37m[${COMPOSE_PROJECT_NAME}] Application URL: http://localhost:${COMPOSE_PROJECT_PORT_HTTP}/\033[0m\n"
  printf "\033[0;37m[${COMPOSE_PROJECT_NAME}] XHGUI URL: http://localhost:${COMPOSE_PROJECT_PORT_XHGUI}/\033[0m\n"
  printf "\033[0;37m[${COMPOSE_PROJECT_NAME}] Mailhog URL: http://localhost:${COMPOSE_PROJECT_PORT_MAIL_WEBGUI}/\033[0m\n"
  printf "\033[0;37m[${COMPOSE_PROJECT_NAME}] Elasticsearch URL: http://localhost:${COMPOSE_PROJECT_PORT_ELASTICSEARCH}/\033[0m\n"
  printf "\033[0;37m[${COMPOSE_PROJECT_NAME}] Mysql address: 127.0.0.1:${COMPOSE_PROJECT_PORT_MYSQL}\033[0m\n"
fi

if [[ $DOCKER_COMPOSE_VERSION -gt 1 ]]; then
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_BIN} run -i"
else
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_BIN} run --rm"
fi

if docker system info --format '{{.SecurityOptions}}' | grep "name=rootless" > /dev/null; then
  DOCKER_COMPOSE_RUN_CMD="${DOCKER_COMPOSE_RUN_CMD} --user root"
fi

if echo $1 | grep -i 'import' | grep -i 'db\|database\|mysql' > /dev/null; then
  if [[ -z $2 ]]; then
    echo "Data file was not provided"
    exit 1
  fi
  if ! [[ -r $2 ]]; then
    echo "Data file '$2' does not readable"
    exit 1
  fi
  DB_DUMP=$(realpath $2)
  DB_DUMP_BASENAME=$(echo "${DB_DUMP##*/}")
  if echo ${DB_DUMP_BASENAME} | grep -i 'sql\.gz$' > /dev/null; then
    MYSQL_CMD="\$(which pv > /dev/null && echo 'pv -f' || echo cat) /${DB_DUMP_BASENAME} | gunzip | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/DEFINER=CURRENT_USER \*/' | MYSQL_PWD=\$DATABASE_PASSWORD mysql -h\$DATABASE_HOST -P\$DATABASE_PORT -u\$DATABASE_USER \$DATABASE_NAME"
  else
    MYSQL_CMD="\$(which pv > /dev/null && echo 'pv -f' || echo cat) /${DB_DUMP_BASENAME} | sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/DEFINER=CURRENT_USER \*/' | MYSQL_PWD=\$DATABASE_PASSWORD mysql -h\$DATABASE_HOST -P\$DATABASE_PORT -u\$DATABASE_USER \$DATABASE_NAME"
  fi
  echo "Starting import of the database dump..."
  exec ${DOCKER_COMPOSE_RUN_CMD} -v "${DB_DUMP}:/${DB_DUMP_BASENAME}" database-cli bash -c "$MYSQL_CMD"
fi

if echo $1 | grep -i 'database' | grep -i 'setup\|config\|configure' > /dev/null; then
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash <<COMMANDS
set -x
set -e
bin/magento setup:config:set --quiet --db-host \$DATABASE_HOST --db-user \$DATABASE_USER --db-password \$DATABASE_PASSWORD --db-name \$DATABASE_NAME
bin/magento app:config:import --quiet
COMMANDS
fi

if echo $1 | grep -i 'redis' | grep -i 'setup\|config\|configure' > /dev/null; then
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash <<COMMANDS
set -x
set -e
bin/magento setup:config:set --quiet --cache-backend redis --cache-backend-redis-server redis --cache-backend-redis-port 6379 --cache-backend-redis-db 0
bin/magento setup:config:set --quiet --session-save redis --session-save-redis-host redissession --session-save-redis-port 6379 --session-save-redis-db 0
bin/magento app:config:import --quiet
COMMANDS
fi

if echo $1 | grep -i 'es\|elastic' | grep -i 'setup\|config\|configure' > /dev/null; then
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash <<COMMANDS
set -x
set -e
bin/magento config:set catalog/search/elasticsearch7_server_hostname elasticsearch
bin/magento config:set catalog/search/elasticsearch7_server_port 9200
COMMANDS
fi

if echo $1 | grep -i '^mysql' > /dev/null; then
  for i in "$@"; do
      i="${i//\\/\\\\}"
      i="${i//$/\\$}"
      C="$C \"${i//\"/\\\"}\""
  done
  MYSQL_CMD="MYSQL_PWD=\$DATABASE_PASSWORD mysql -h\$DATABASE_HOST -P\$DATABASE_PORT -u\$DATABASE_USER \$DATABASE_NAME"
  exec ${DOCKER_COMPOSE_RUN_CMD} database-cli bash -c "$MYSQL_CMD"
fi

if echo $1 | grep -i '^composer\|bin/\|npm\|php\|node\|yarn\|bash' > /dev/null; then
  for i in "$@"; do
      i="${i//\\/\\\\}"
      i="${i//$/\\$}"
      C="$C \"${i//\"/\\\"}\""
  done
  exec ${DOCKER_COMPOSE_RUN_CMD} cli bash -c "exec $C"
fi

if echo $1 | grep -i 'xhprof' | grep -i 'patch' > /dev/null; then
  exec bash <<COMMANDS
set -x
set -e
patch -p0 -d ${COMPOSE_PROJECT_APPDIR} < "${COMPOSE_PROJECT_CONFIG_DIR}/xhprof.patch"
COMMANDS
fi

if echo $1 | grep -i 'xhprof' | grep -i 'revert' > /dev/null; then
  exec bash <<COMMANDS
set -x
set -e
patch -R -p0 -d ${COMPOSE_PROJECT_APPDIR} < "${COMPOSE_PROJECT_CONFIG_DIR}/xhprof.patch"
COMMANDS
fi

exec ${DOCKER_COMPOSE_BIN} "$@"

