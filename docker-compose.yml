version: '3.4'

services:
  fpm:
    image: "digitalspacestudio/php:${COMPOSE_PROJECT_PHP_VERSION-7.4}"
    container_name: ${COMPOSE_PROJECT_NAME}_fpm
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    user: root
    volumes:
      - 'appcode:/var/www'
      - 'session:/var/www/var/session'
      - 'npm:/home/linuxbrew/.npm'
      - 'composer:/home/linuxbrew/.composer'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/fpm/php-fpm.conf:/home/linuxbrew/.linuxbrew/etc/php/${COMPOSE_PROJECT_PHP_VERSION-7.4}/php-fpm.conf:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/fpm/php.ini:/home/linuxbrew/.linuxbrew/etc/php/${COMPOSE_PROJECT_PHP_VERSION-7.4}/php.ini.dist:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/fpm/msmtprc:/home/linuxbrew/.msmtprc:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/fpm/entrypoint.sh:/entrypoint.sh:ro'
    entrypoint: '/entrypoint.sh'
    working_dir: '/var/www'
    networks:
      - 'appnet'
    environment:
      - 'XHGUI_MONGO_HOSTNAME=mongodb'
      - 'XHGUI_MONGO_DATABASE=xhprof'
      - 'COMPOSER_AUTH=$COMPOSE_PROJECT_COMPOSER_AUTH'
    networks:
      - 'appnet'
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mail:
        condition: service_healthy
    restart: always
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/9000"
      start_period: 60s
      interval: 5s

  cli:
    image: "digitalspacestudio/php:${COMPOSE_PROJECT_PHP_VERSION-7.4}"
    user: root
    command: /usr/bin/true
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    volumes:
      - 'appcode:/var/www'
      - 'npm:/home/linuxbrew/.npm'
      - 'composer:/home/linuxbrew/.composer'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/cli/php.ini:/home/linuxbrew/.linuxbrew/etc/php/${COMPOSE_PROJECT_PHP_VERSION-7.4}/php.ini.dist:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/fpm/msmtprc:/home/linuxbrew/.msmtprc:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/cli/entrypoint.sh:/entrypoint.sh:ro'
    entrypoint: '/entrypoint.sh'
    working_dir: '/var/www'
    environment:
      - 'XHGUI_MONGO_HOSTNAME=mongodb'
      - 'XHGUI_MONGO_DATABASE=xhprof'
      - 'COMPOSER_AUTH=$COMPOSE_PROJECT_COMPOSER_AUTH'
      - 'DATABASE_HOST=database'
      - 'DATABASE_PORT=3306'
      - 'DATABASE_USER=magento2'
      - 'DATABASE_PASSWORD=magento2'
      - 'DATABASE_NAME=magento2'
    networks:
      - 'appnet'
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mail:
        condition: service_healthy

  xhgui:
    image: "xhgui/xhgui:0.18.1"
    container_name: ${COMPOSE_PROJECT_NAME}_xhgui
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    volumes:
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/xhgui/config:/var/www/xhgui/config'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/xhgui/nginx.conf:/etc/nginx/conf.d/default.conf:ro'
    environment:
      - XHGUI_MONGO_HOSTNAME=mongodb
      - XHGUI_MONGO_DATABASE=xhprof
    ports:
      - "${COMPOSE_PROJECT_PORT_XHGUI:-81}:80"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: nc -vz -w 1 localhost 80
      start_period: 30s
      interval: 5s

  mail:
    image: "mailhog/mailhog"
    container_name: ${COMPOSE_PROJECT_NAME}_mail
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    ports:
      - "${COMPOSE_PROJECT_PORT_MAIL_WEBGUI:-8025}:8025"
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: "nc -vz -w 1 localhost 8025"
      start_period: 5s
      interval: 5s

  mongodb:
    image: percona/percona-server-mongodb:4.4
    # (case sensitive) engine: mmapv1, rocksdb, wiredTiger, inMemory
    command: --storageEngine=wiredTiger
    container_name: ${COMPOSE_PROJECT_NAME}_mongodb
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    environment:
      - MONGO_INITDB_DATABASE=xhprof
    volumes:
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/mongo/initdb.d:/docker-entrypoint-initdb.d'
    ports:
      - "27017"
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: mongo --quiet --eval 'db.runCommand("ping").ok' xhgui
      start_period: 30s
      interval: 10s

  elasticsearch:
    build:
      context: "${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/elasticsearch"
      args:
        COMPOSE_PROJECT_ELASTICSEARCH_VERSION: ${COMPOSE_PROJECT_ELASTICSEARCH_VERSION:-7.10.2}
    build: "${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/elasticsearch"
    container_name: ${COMPOSE_PROJECT_NAME}_elasticsearch
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    volumes:
      - "elasticsearch-data:/usr/share/elasticsearch/data:delegated"
    environment:
      ES_JAVA_OPTS: '${ES_JAVA_OPTS:--Xms256m -Xmx2048m}'
      discovery.type: 'single-node'
    ports:
      - "${COMPOSE_PROJECT_PORT_ELASTICSEARCH:-9200}:9200"
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/9200"
      start_period: 15s
      interval: 5s
      retries: 5

  redis:
    image: 'redis:6.0-bullseye'
    command: 'redis-server --save "" --loglevel warning --maxmemory 16mb --maxmemory-policy allkeys-lru'
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/6379"
      start_period: 30s
      interval: 5s

  database:
    image: 'mariadb:10.4'
    command: '--default-authentication-plugin=mysql_native_password'
    container_name: ${COMPOSE_PROJECT_NAME}_database
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    cap_add:
      - SYS_NICE # CAP_SYS_NICE
    environment:
      LANG: 'C.UTF-8'
      MYSQL_ROOT_PASSWORD: 'root'
      MYSQL_USER: 'magento2'
      MYSQL_PASSWORD: 'magento2'
      MYSQL_DATABASE: 'magento2'
    volumes:
#      - '${COMPOSE_PROJECT_APPDIR:-$PWD}/.mysql.initdb.d:/docker-entrypoint-initdb.d:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/mysql/my.cnf:/etc/mysql/conf.d/magento2.cnf:ro'
      - 'mysql-data:/var/lib/mysql:delegated'
    ports:
      - '${COMPOSE_PROJECT_PORT_MYSQL:-3306}:3306'
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: "mysqladmin ping --silent -u$${MYSQL_USER} -p$${MYSQL_PASSWORD}"
      start_period: 60s
      interval: 5s
      retries: 5

  database-cli:
    image: 'mariadb:10.4'
    command: /usr/bin/true
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    environment:
      - 'DATABASE_HOST=database'
      - 'DATABASE_PORT=3306'
      - 'DATABASE_USER=magento2'
      - 'DATABASE_PASSWORD=magento2'
      - 'DATABASE_NAME=magento2'
    networks:
      - 'appnet'
    depends_on:
      database:
        condition: service_healthy

  nginx:
    build: "${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/nginx"
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    labels:
      - 'project.name=${COMPOSE_PROJECT_NAME}'
    depends_on:
      fpm:
        condition: service_healthy
    ports:
      - '${COMPOSE_PROJECT_PORT_HTTP:-80}:80'
    volumes:
      - 'appcode:/var/www:ro'
      - '${COMPOSE_PROJECT_CONFIG_DIR:-.}/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
    networks:
      - 'appnet'
    restart: always
    healthcheck:
      test: /bin/bash -c "</dev/tcp/localhost/80"
      start_period: 30s
      interval: 5s

networks:
  appnet:

volumes:
  appcode:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: "${COMPOSE_PROJECT_APPDIR:-$PWD}"
  npm:
    driver: local
  composer:
    driver: local
  session:
    driver: local
  elasticsearch-data:
    driver: local
  mysql-data:
    driver: local
